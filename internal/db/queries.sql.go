// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClick = `-- name: CreateClick :exec
INSERT INTO clicks (link_id, ip_address, user_agent, referrer)
VALUES ($1, $2, $3, $4)
`

type CreateClickParams struct {
	LinkID    int32       `db:"link_id" json:"linkId"`
	IpAddress pgtype.Text `db:"ip_address" json:"ipAddress"`
	UserAgent pgtype.Text `db:"user_agent" json:"userAgent"`
	Referrer  pgtype.Text `db:"referrer" json:"referrer"`
}

func (q *Queries) CreateClick(ctx context.Context, arg CreateClickParams) error {
	_, err := q.db.Exec(ctx, createClick,
		arg.LinkID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Referrer,
	)
	return err
}

const createLink = `-- name: CreateLink :one
INSERT INTO links (
    code,
    url,
    expires_at,
    user_id
)
VALUES ($1, $2, $3, $4)
RETURNING id, code, url, created_at
`

type CreateLinkParams struct {
	Code      string             `db:"code" json:"code"`
	Url       string             `db:"url" json:"url"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
	UserID    pgtype.Text        `db:"user_id" json:"userId"`
}

type CreateLinkRow struct {
	ID        int32     `db:"id" json:"id"`
	Code      string    `db:"code" json:"code"`
	Url       string    `db:"url" json:"url"`
	CreatedAt time.Time `db:"created_at" json:"createdAt"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (CreateLinkRow, error) {
	row := q.db.QueryRow(ctx, createLink,
		arg.Code,
		arg.Url,
		arg.ExpiresAt,
		arg.UserID,
	)
	var i CreateLinkRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}

const getLinkByCode = `-- name: GetLinkByCode :one
SELECT id, code, url, created_at FROM links WHERE code = $1 LIMIT 1
`

type GetLinkByCodeRow struct {
	ID        int32     `db:"id" json:"id"`
	Code      string    `db:"code" json:"code"`
	Url       string    `db:"url" json:"url"`
	CreatedAt time.Time `db:"created_at" json:"createdAt"`
}

func (q *Queries) GetLinkByCode(ctx context.Context, code string) (GetLinkByCodeRow, error) {
	row := q.db.QueryRow(ctx, getLinkByCode, code)
	var i GetLinkByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}

const getLinkByURL = `-- name: GetLinkByURL :one
SELECT id, code, url, created_at FROM LINKS WHERE url = $1 LIMIT 1
`

type GetLinkByURLRow struct {
	ID        int32     `db:"id" json:"id"`
	Code      string    `db:"code" json:"code"`
	Url       string    `db:"url" json:"url"`
	CreatedAt time.Time `db:"created_at" json:"createdAt"`
}

func (q *Queries) GetLinkByURL(ctx context.Context, url string) (GetLinkByURLRow, error) {
	row := q.db.QueryRow(ctx, getLinkByURL, url)
	var i GetLinkByURLRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}
